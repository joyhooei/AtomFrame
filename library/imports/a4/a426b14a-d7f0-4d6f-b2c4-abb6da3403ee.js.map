{"version":3,"sources":["../../../../../assets/Script/AtomFrame/assets/Script/AtomFrame/timerMgr.js"],"names":["cc","Class","extends","Component","properties","TAG","TASK_TYPE_RE","TASK_TYPE_ONE","ctor","console","log","tasklist","schedule","mUpdate","onLoad","onDestroy","unschedule","t","key","hasOwnProperty","item","remove","cd_t","time","callback","taskType","registerTask","_taskName","_taskType","_callback","_time","taskName","cleanTask","cleanAllTask","checkTask"],"mappings":";;;;;;AACAA,GAAGC,KAAH,CAAS;AACLC,aAASF,GAAGG,SADP;;AAGLC,gBAAY;AACRC,aAAK,UADG;AAERC,sBAAgB,CAFR;AAGRC,uBAAgB;AAHR,KAHP;;AASLC,UAAM,gBAAY;AACdC,gBAAQC,GAAR,CAAY,UAAU,KAAKL,GAA3B;AACA,aAAKM,QAAL,GAAgB,EAAhB;AACA,aAAKC,QAAL,CAAc,KAAKC,OAAnB,EAA4B,CAA5B;AACH,KAbI;;AAeLC,YAAQ,kBAAY;AAChBL,gBAAQC,GAAR,CAAY,WAAW,KAAKL,GAA5B;AACH,KAjBI;;AAmBLU,eAAW,qBAAY;AACnBN,gBAAQC,GAAR,CAAY,cAAc,KAAKL,GAA/B;AACA,aAAKW,UAAL,CAAgB,KAAKH,OAArB;AACH,KAtBI;;AAwBLA,aAAS,iBAAUI,CAAV,EAAa;AAClB;AACA,aAAK,IAAIC,GAAT,IAAgB,KAAKP,QAArB,EAA+B;AAC3B,gBAAI,KAAKA,QAAL,CAAcQ,cAAd,CAA6BD,GAA7B,CAAJ,EAAuC;AACnC,oBAAIE,OAAO,KAAKT,QAAL,CAAcO,GAAd,CAAX;AACA,oBAAIE,QAAQ,IAAZ,EAAkB;AACd,wBAAIA,KAAKC,MAAL,IAAe,KAAnB,EAA0B;AACtBD,6BAAKE,IAAL,IAAaL,CAAb;AACA,4BAAIG,KAAKE,IAAL,GAAYF,KAAKG,IAArB,EAA2B;AACvBH,iCAAKE,IAAL,GAAY,CAAZ;AACAF,iCAAKI,QAAL;AACA;AACA;AACA,gCAAIJ,KAAKK,QAAL,IAAiB,KAAKlB,aAA1B,EAAyC;AACrCa,qCAAKC,MAAL,GAAc,IAAd;AACAZ,wCAAQC,GAAR,CAAY,gBAAZ,EAA8BQ,GAA9B;AACH;AACJ;AACJ,qBAZD,MAYO;AACH,6BAAKP,QAAL,CAAcO,GAAd,IAAqB,IAArB;AACH;AACJ;AACJ;AACJ;AACJ,KAhDI;;AAkDLQ,kBAAc,sBAAUC,SAAV,EAAsBC,SAAtB,EAAkCC,SAAlC,EAA8CC,KAA9C,EAAsD;AAChE,YAAI,KAAKnB,QAAL,CAAcgB,SAAd,KAA4B,IAAhC,EAAqC;AACjClB,oBAAQC,GAAR,CAAY,2BAAZ,EAAyCiB,SAAzC;AACA;AACH;;AAED,YAAIP,OAAO,EAAX;AACAA,aAAKW,QAAL,GAAgBJ,SAAhB;AACAP,aAAKK,QAAL,GAAgBG,SAAhB;AACAR,aAAKI,QAAL,GAAgBK,SAAhB;AACAT,aAAKG,IAAL,GAAgBO,KAAhB;AACAV,aAAKE,IAAL,GAAgB,CAAhB;AACAF,aAAKC,MAAL,GAAgB,KAAhB;;AAEA,aAAKV,QAAL,CAAcgB,SAAd,IAA2BP,IAA3B;AACH,KAjEI;;AAmELY,eAAW,mBAAUL,SAAV,EAAqB;AAC5B,aAAKhB,QAAL,CAAcgB,SAAd,IAA2B,IAA3B;AACH,KArEI;;AAuELM,kBAAc,wBAAY;AACtB,aAAKtB,QAAL,GAAgB,EAAhB;AACH,KAzEI;;AA2ELuB,eAAW,mBAAUP,SAAV,EAAqB;AAC5B,eAAO,KAAKhB,QAAL,CAAcgB,SAAd,KAA4B,IAAnC;AACH;;AA7EI,CAAT","file":"timerMgr.js","sourceRoot":"../../../../../assets/Script/AtomFrame","sourcesContent":["\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        TAG: \"timerMgr\",\n        TASK_TYPE_RE  : 1,\n        TASK_TYPE_ONE : 2,\n    },\n\n    ctor: function () {\n        console.log(\"-new:\" + this.TAG);\n        this.tasklist = {};\n        this.schedule(this.mUpdate, 0);\n    },\n\n    onLoad: function () {\n        console.log(\"-load:\" + this.TAG);\n    },\n\n    onDestroy: function () {\n        console.log(\"-destory:\" + this.TAG);\n        this.unschedule(this.mUpdate)\n    },\n\n    mUpdate: function (t) {\n        // console.log(\"-mUpdate\",t,this.TAG);\n        for (var key in this.tasklist) {\n            if (this.tasklist.hasOwnProperty(key)) {\n                var item = this.tasklist[key]\n                if (item != null) {\n                    if (item.remove == false) {\n                        item.cd_t += t;\n                        if (item.cd_t > item.time) {\n                            item.cd_t = 0;\n                            item.callback();\n                            // console.log(\"update task : \", key, item.taskType);\n                            //执行1次\n                            if (item.taskType == this.TASK_TYPE_ONE) {\n                                item.remove = true;\n                                console.log(\"remove task : \", key);\n                            }\n                        }\n                    } else {\n                        this.tasklist[key] = null;\n                    }\n                }\n            }\n        };\n    },\n\n    registerTask: function (_taskName , _taskType , _callback , _time ) {\n        if (this.tasklist[_taskName] != null){\n            console.log(\" !!! task already exist :\", _taskName);\n            return ;\n        }\n\n        var item = {}\n        item.taskName = _taskName;\n        item.taskType = _taskType;\n        item.callback = _callback;\n        item.time     = _time;\n        item.cd_t     = 0;\n        item.remove   = false;\n\n        this.tasklist[_taskName] = item;\n    },\n\n    cleanTask: function (_taskName) {\n        this.tasklist[_taskName] = null;\n    },\n\n    cleanAllTask: function () {\n        this.tasklist = {};\n    },\n\n    checkTask: function (_taskName) {\n        return this.tasklist[_taskName] != null ;\n    },\n\n});\n"]}